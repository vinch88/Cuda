
#include "Indice1D.h"
#include "cudaTools.h"
#include <stdio.h>
#include "reductionADD.h"
#include "curandTools.h"

static __device__ void reductionInterThread(float* ptrDevResult, int nbSlice);
static __device__ float fpi(float x);

__global__ void montecarlo(curandState* ptrTabGen, int nbFlecheByThread, int* ptrDevNxTotal)
    {
    extern __shared__ int tab_SM[];
    reductionInterThread(ptrTabGen, nbFlecheByThread);
    __syncthreads();
    reductionADD<int>(tab_SM, ptrDevNxTotal);
    }

__device__
void reductionInterThread(int* tab_SM, int nbFlecheByThread)
    {
    const int TID_GLOBAL = Indice1D::tid();

    curandState

    int s = TID_GLOBAL;
    float sum = 0;

    for(int i = 0; i < nbFlecheByThread; i++)
	{
	x
	}
    tab_SM[TID_LOCAL] = sum *DX;
    }

__device__
float fpi(float x)
    {
    return 4 / (1 + x * x);
}
