#include "Rippling.h"

#include <iostream>
#include <assert.h>

#include "Device.h"

using std::cout;
using std::endl;

extern __global__ void vague(uchar4* ptrDevPixels,uint w, uint h,float t);
/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

Rippling::Rippling(uint w, uint h, float dt) :
	Animable_I<uchar4>(w, h, "Rippling_OMP_rgba_uchar4")
    {
    // Input
    this->dt = dt;  // animation

    // Tools
    this->t = 0;					// protected dans super classe Animable
    this->parallelPatern = ParallelPatern::OMP_MIXTE;   // protected dans super classe Animable

    // OMP
    cout << "\n[Rippling] : OMP : nbThread = " << this->nbThread << endl; // protected dans super classe Animable
    }

Rippling::~Rippling(void)
    {
    // rien
    }

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * Override
 */
void Rippling::animationStep()
    {
    t += dt;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/**
 * Override (code naturel omp)
 * Image non zoomable : domaineMath pas use ici
 */
void Rippling::processForAutoOMP(uchar4* ptrTabPixels, uint w, uint h, const DomaineMath& domaineMath)
    {
    RipplingMath ripplingMath(w); // ici pour preparer cuda

 #pragma omp parallel for
     for (int i = 0; i < h; i++)
 	{
 	for (int j = 0; j < w; j++)
 	    {
 	    // int s = i * W + j;
 	    int s = IndiceTools::toS(w, i, j);    // i[0,H[ j[0,W[  --> s[0,W*H[

 	   ripplingMath.colorIJ(&ptrTabPixels[s], i, j, t);
 	    }
 	}
    }

/**
 * Override (code entrainement cuda)
 * Image non zoomable : domaineMath pas use ici
 */
void Rippling::processEntrelacementOMP(uchar4* ptrTabPixels, uint w, uint h, const DomaineMath& domaineMath)
    {
	RipplingMath ripplingMath(w); // ici pour preparer cuda

	const int WH = w * h;

   #pragma omp parallel
   	{
   	const int TID = OmpTools::getTid();
   	const int NB_THREAD = OmpTools::getNbThread(); // dans region parallel

   	int i;	// in [0,h[
   	int j; 	// in [0,w[

   	int s = TID; // in [0,...
   	while (s < WH)
   	    {
   	    IndiceTools::toIJ(s, w, &i, &j); // s[0,W*H[ --> i[0,H[ j[0,W[

   	    ripplingMath.colorIJ(&ptrTabPixels[s], i, j, t); // update ptrTabPixels[s]

   	    s += NB_THREAD;
   	    }
   	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

