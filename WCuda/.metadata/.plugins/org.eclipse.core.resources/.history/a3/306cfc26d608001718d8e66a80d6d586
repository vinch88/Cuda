#include <iostream>
#include <assert.h>

#include "Device.h"
#include <assert.h>
#include "RayTracing.h"

using std::cout;
using std::endl;


extern __global__ void rayTracing(uchar4* ptrDevPixels,uint w, uint h,float t);



RayTracing::RayTracing(uint nbSphere, const Grid& grid, uint w, uint h, float dt) :
	Animable_I<uchar4>(grid, w, h, "RayTracing_Cuda_RGBA_uchar4")
    {

    // Inputs
    this->dt = dt;
    this->nbSphere = nbSphere;

    this->sizeOctet = n * sizeof(Sphere);

    SphereCreator sphereCreator(nbSphere,w,h);
    this->ptrTabSphere=sphereCreator.getTab();

    // Tools
    this->t = 0;

    // Memorie Management
  	{

  	// MM (malloc Device)
  	    {
  	    Device::malloc(&ptrDevV1, sizeOctet);

  	    }

  	// MM (copy Host->Device)
  	    {
  	    Device::memcpyHToD(ptrDevV1, ptrV1, sizeOctet);
  	    Device::memcpyHToD(ptrDevV2, ptrV2, sizeOctet);
  	    Device::memcpyHToD(ptrDevW, ptrW, sizeOctet);
  	    }

  	Device::lastCudaError("AddVector MM (end allocation)"); // temp debug, facultatif
  	}


    }

RayTracing::~RayTracing()
    {
    // rien
    }



void RayTracing::process(uchar4* ptrDevPixels, uint w, uint h, const DomaineMath& domaineMath)
    {
    Device::lastCudaError("rippling rgba uchar4 (before kernel)"); // facultatif, for debug only, remove for release

    rayTracing<<<dg,db>>>(ptrDevPixels,w,h,t);

    Device::lastCudaError("rippling rgba uchar4 (after kernel)"); // facultatif, for debug only, remove for release
    }


void RayTracing::animationStep()
    {
    t += dt;
    }


